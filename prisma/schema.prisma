// هذا الملف يحدد بنية قاعدة البيانات باستخدام Prisma ORM
// يحتوي على تعريف الجداول (النماذج) والعلاقات بينها
// لمزيد من المعلومات: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// نموذج المستخدمين
model User {
  id            String    @id @default(cuid()) // معرف المستخدم
  name          String?   // اسم المستخدم
  email         String    @unique // البريد الإلكتروني (فريد)
  password      String?   // كلمة المرور
  image         String?   // صورة المستخدم
  emailVerified DateTime? // تاريخ التحقق من البريد
  createdAt     DateTime  @default(now()) // تاريخ الإنشاء
  updatedAt     DateTime  @updatedAt // تاريخ آخر تحديث

  accounts Account[] // علاقات الحسابات
  sessions Session[] // علاقات الجلسات
  orders   Order[]   // علاقات الطلبات
  reviews  Review[]  // علاقات التقييمات

  @@map("users")
}

// نموذج حسابات OAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// نموذج الجلسات
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// نموذج رموز التحقق
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// نموذج التصنيفات
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[] // علاقة المنتجات

  @@map("categories")
}

// نموذج المنتجات
model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  salePrice   Float?
  images      String[]
  categoryId  String
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category    @relation(fields: [categoryId], references: [id])
  variants ProductVariant[]
  reviews  Review[]
  orderItems OrderItem[]

  @@map("products")
}

// نموذج متغيرات المنتج (مثل المقاس أو اللون)
model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  size      String?
  color     String?
  stock     Int      @default(0)
  price     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

// نموذج التقييمات
model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// نموذج الطلبات
model Order {
  id            String      @id @default(cuid())
  userId        String
  status        OrderStatus @default(PENDING)
  total         Float
  shippingAddress Json
  billingAddress  Json
  paymentIntentId String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

// نموذج عناصر الطلب
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  variant   Json?
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// حالة الطلب (تعداد)
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
} 